/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.14/samples
 */

//
// Install the gradle Ice Builder plug-in from the plug-in portal
//
plugins {
    id 'com.zeroc.gradle.ice-builder.slice' version '1.5.0' apply false
}

subprojects {
    //
    // Apply Java and Ice Builder plug-ins to all sub-projects
    //
    apply plugin: 'java'
    apply plugin: 'com.zeroc.gradle.ice-builder.slice'

    //
    // Todos los proyectos comparten las definiciones Slice
    //
    slice {
        iceHome = "/opt/homebrew/opt/ice"
        java {
            files = [file("../Votation.ice"), file("../VotingProxy.ice"), file("../CentralVotation.ice"), file("../VotingQuery.ice"), file("../CandidateNotification.ice")]
        }
    }

    //
    // Use Ice JAR files from maven central repository
    //
    repositories {
        mavenCentral()
    }

    //
    // Dependencias base para todos los proyectos
    //
    dependencies {
        implementation 'com.zeroc:ice:3.7.10'
        implementation 'com.zeroc:icegrid:3.7.10'

        // Dependencias especÃ­ficas por proyecto
        if (project.name == 'votingSite') {
            implementation project(':reliableMessaging')
        }

        // NUEVO: CentralServer como dependencia para departmentalServer
        if (project.name == 'departmentalServer') {
            implementation project(':centralServer')
            implementation project(':departmentalReliableMessaging')
        }

        // NUEVO: testFramework necesita acceso a centralServer y departmentalReliableMessaging
        if (project.name == 'testFramework') {
            implementation project(':centralServer')
            implementation project(':departmentalReliableMessaging')
        }

        // NUEVO: departmentalReliableMessaging necesita acceso a centralServer para las interfaces
        if (project.name == 'departmentalReliableMessaging') {
            implementation project(':centralServer')
        }
    }

    //
    // Create a JAR file with the appropriate Main-Class and Class-Path attributes
    //
    jar {
        manifest {
            if (project.name == 'reliableMessaging') {
                attributes(
                        "Main-Class": "ReliableMessagingService",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'centralServer') {
                attributes(
                        "Main-Class": "CentralServer",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'departmentalReliableMessaging') {
                attributes(
                        "Main-Class": "DepartmentalReliableMessagingService",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'votingSite') {
                attributes(
                        "Main-Class": "VotingSite",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'votingMachine') {
                attributes(
                        "Main-Class": "VotingMachine",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'departmentalServer') {
                attributes(
                        "Main-Class": "DepartmentalServer",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else if (project.name == 'testFramework') {
                attributes(
                        "Main-Class": "TestRunner",
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            } else {
                attributes(
                        "Main-Class": project.name.capitalize(),
                        "Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' ')
                )
            }
        }
    }

    //
    // Task personalizada para mostrar dependencias de cada proyecto
    //
    task showDependencies {
        doLast {
            println "Proyecto: ${project.name}"
            println "Dependencias:"
            configurations.implementation.dependencies.each { dep ->
                println "  - ${dep.name}"
            }
            println ""
        }
    }
}